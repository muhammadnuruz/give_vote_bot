import logging
from aiogram import Bot, Dispatcher, types
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.utils import executor
from aiogram.dispatcher.filters import Command

API_TOKEN = "8146850036:AAFsrvfEb-prk-W7TSy6t-jFPAfvbcgnKG4"

REQUIRED_CHANNELS = ["@Bosqichma_Bosqich_Rivojlanish", "@TOSHVIL_SPORT"]
admins = [1974800905]

logging.basicConfig(level=logging.INFO)

bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)

electors = [
    "–ì–∞—Ñ—É—Ä–æ–≤ –†–æ–≤—à–∞–Ω –ö–∞—Å–∏–º–∂–∞–Ω–æ–≤–∏—á",
    "–†–∏—Ö—Å–∏–±–∞–µ–≤ –î–æ–Ω–∏—ë—Ä –ö–æ–º–∏–ª–¥–∂–∞–Ω–æ–≤–∏—á",
    "–•–∞–ª–∏–∫–æ–≤ –î–∞–≤—Ä–æ–Ω –û—Ç–∫—É—Ä–∂–∞–Ω–æ–≤–∏—á",
    "–†–∞—Ö–º–∞—Ç–æ–≤ –®—É—Ö—Ä–∞—Ç –ù—É—Å—Ä–∞—Ç—É–ª–ª–∞–µ–≤–∏—á",
    "–ú–∞—Ç–∫–∞—Ä–∏–º–æ–≤ –ë–æ—Ç–∏—Ä–∞–ª–∏ –®–µ—Ä–∞–ª–∏–µ–≤–∏—á",
    "–†–∞—Ö–º–∞–Ω–∫—É–ª–æ–≤–∞ –ë–∞—Ä–Ω–æ –°–∞—Ö–∏–±–∂–∞–Ω–æ–≤–Ω–∞",
    "–Æ—Å—É–ø–æ–≤ –ë–µ–∫–∂–æ–Ω –£–∫—Ç–∞–º–∞–ª–∏–µ–≤–∏—á",
    "–£–º–∞—Ä–∞–ª–∏–µ–≤ –≠–ª—ë—Ä–∂–æ–Ω –≠—Ä–∫–∏–Ω–æ–≤–∏—á",
    "–•–∞—Å–∞–Ω–æ–≤ –û–∑–æ–¥ –•–∞–º–∏–¥—É–ª–ª–∞–µ–≤–∏—á",
    "–°—É–ª—Ç–∞–Ω–æ–≤ –°—É—Ö—Ä–æ–± –£–°–ú–æ–Ω–±–æ–µ–≤–∏—á",
    "–ö–∞–º–æ–ª—Ö–æ–Ω–æ–≤ –ê–∑–∏–∑—Ö–æ–Ω –ú—É—Ö–∏—Ç–¥–∏–Ω–æ–≤–∏—á",
    "–•–∞—Ñ–∏–∑–æ–≤ –ê–±–¥—É–ª—Ñ–∞–∑–ª –ê–±–¥—É–∫–∞—Ä–∏–º–æ–≤–∏—á",
    "–¢–æ—à–ø—É–ª–∞—Ç–æ–≤ –û–π–±–µ–∫ –•–∏–¥–∏—Ä —û“ì–ª–∏",
    "–®–∞—Ä–æ–ø–æ–≤ –®–µ—Ä–∑–æ–¥ –ê–ª–∏–º–∂–∞–Ω–æ–≤–∏—á",
    "–¢—É—Ä–∞–±–µ–∫–æ–≤–∞ –õ—É–∏–∑–∞ –ú–∏—Ä–∑–∞–±–µ–∫–æ–≤–Ω–∞",
    "–ú—É—Ä–∞—Ç–æ–≤ –®–∞–º—Å–∏–¥–¥–∏–Ω –ñ–∞–ª–∞–ª–∏–¥–¥–∏–Ω–æ–≤–∏—á",
    "–ú—É–Ω–∞–≤–∞—Ä–æ–≤ –î–∏–ª—à–æ–¥—Ö—É–∂–∞ –ú—É—Ö–∏—Ç–¥–∏–Ω —ÉÃÅ–≥–ª–∏",
    "–ê–±–¥—É–∫–∞—Ä–∏–º–æ–≤ –î–∞–≤—Ä–æ–Ω –¢–µ–ª–µ–±–∞–µ–≤–∏—á",
    "–®–µ—Ä–Ω–∞–∑–æ–≤ –°–∞–Ω–∂–∞–Ω –§–∞—Ä“≥–æ–¥ —û“ì–ª–∏",
    "–ú–∏—Ä–∞–±–¥—É–ª–ª–∞–µ–≤ –ú–∏—Ä–≤–æ—Ö–∏–¥ –ú–∏—Ä–º–∞—Ö–º—É–¥–æ–≤–∏—á",
    "–†–∞—à–∏–¥–æ–≤ –ë–∞—Ö–æ–¥–∏—Ä –ê–±–¥—É—Ä–∞—Å—É–ª–æ–≤–∏—á",
    "–¢–∞—à–º–∞—Ç–æ–≤ –®–µ—Ä–º–∞—Ö–∞–º–∞—Ç –•–æ–ª–º–∞—Ç–æ–≤–∏—á",
    "–ê–∫–±–∞—Ä–æ–≤ –ú—É—Ä–æ–¥ –î–∏–ª—à–æ–¥–æ–≤–∏—á",
    "–†–∞—Ö–º–∞—Ç–∏–ª–ª–∞–µ–≤ –°–∞–¥—É–ª–ª–æ –ê–±—Å–∞—Ç—Ç–æ—Ä–æ–≤–∏—á",
    "–•–∞–ª–∏–∫–æ–≤–∞ –û–ª—å–≥–∞ –ê–Ω–¥—Ä–µ–µ–≤–Ω–∞",
    "–ö–∞—Ä–∏–º–æ–≤ –£–°–ú–æ–Ω–∂–æ–Ω –Å“õ—É–±–∂–æ–Ω–æ–≤–∏—á",
    "–ê–≤–∑–∞–ª –°–∞–∏–¥—Ö—û–∂–∞–π–µ–≤ –ú—É—Ä–æ–¥—Ö—û–∂–∞–π–µ–≤–∏—á",
    "–î–∂—É–Ω—É—Å–æ–≤ –ê–Ω–≤–∞—Ä–±–µ–∫ –¢—É–π–ª–∏–±–∞–π —É–≥–ª–∏",
    "–ë–∞–±–∞–∫–∞–ª–∞–Ω–æ–≤ –§–∞—Ä—Ö–æ–¥ –°–∞–±–∏—Ä–æ–≤–∏—á",
    "–î–∂–∞–Ω–≥–∞–±–∞–µ–≤ –°–∞–Ω–∂–∞—Ä –®–∞–≤–∫–∞—Ç–æ–≤–∏—á",
    "–£–º–∞—Ä–æ–≤ –ñ–∞—Å—É—Ä –£–∫—Ç–∞–º–æ–≤–∏—á"
]


def save_user(user: types.User):
    try:
        with open("users.txt", "a+", encoding="utf-8") as file:
            file.seek(0)
            lines = file.readlines()
            user_ids = [line.split(",")[0] for line in lines]

            if str(user.id) not in user_ids:
                file.write(f"{user.id},{user.username or 'None'},{user.full_name}\n")
                return False
    except Exception as e:
        logging.error(f"Foydalanuvchini saqlashda xatolik: {e}")
    return True


def generate_keyboard():
    keyboard = InlineKeyboardMarkup(row_width=3)
    for index, name in enumerate(electors, start=1):
        keyboard.add(InlineKeyboardButton(text=name, callback_data=f"vote_{index}"))
    return keyboard


def get_total_votes():
    total_votes = 0
    try:
        with open("all_votes.txt", "r", encoding="utf-8") as file:
            total_votes = len(file.readlines())
    except FileNotFoundError:
        pass
    return total_votes


async def check_subscription(user_id):
    not_subscribed_channels = []
    for channel in REQUIRED_CHANNELS:
        try:
            member = await bot.get_chat_member(chat_id=channel, user_id=user_id)
            if member.status not in ["member", "administrator", "creator"]:
                not_subscribed_channels.append(channel)
        except Exception as e:
            logging.error(f"Kanalni tekshirishda xatolik: {e}")
            not_subscribed_channels.append(channel)
    return not_subscribed_channels


async def get_channel_name(channel_id):
    try:
        chat = await bot.get_chat(channel_id)
        return chat.title
    except Exception as e:
        logging.error(f"Kanal nomini olishda xatolik: {e}")
        return None


async def generate_subscription_buttons(not_subscribed_channels):
    keyboard = InlineKeyboardMarkup(row_width=1)
    for channel in not_subscribed_channels:
        channel_name = await get_channel_name(channel)
        if channel_name:
            button = InlineKeyboardButton(text=channel_name, url=f"t.me/{channel[1:]}")
            keyboard.add(button)
    return keyboard


@dp.message_handler(Command("start"))
async def start_command(message: types.Message):
    user_id = message.from_user.id
    not_subscribed_channels = await check_subscription(user_id)
    k = save_user(message.from_user)
    if not k:
        for admin in admins:
            await bot.send_message(chat_id=admin, text=f"""
Yangi userüÜï
ID: <a href='tg://user?id={message.from_user.id}'>{message.from_user.id}</a>
Username: @{message.from_user.username}
Ism-Familiya: {message.from_user.full_name}""", parse_mode='HTML')
    if not_subscribed_channels:
        keyboard = await generate_subscription_buttons(not_subscribed_channels)
        await message.answer(
            "Botdan foydalanish uchun quyidagi kanallarga obuna bo'ling:\n",
            reply_markup=keyboard
        )
    else:
        if not electors:
            await message.answer("Saylanuvchilar ro'yxati bo'sh!")
            return

        await message.answer(
            "Ovoz berish uchun quyidagi tugmalardan birini tanlang:",
            reply_markup=generate_keyboard()
        )


@dp.callback_query_handler(lambda c: c.data and c.data.startswith("vote_"))
async def process_vote(callback_query: types.CallbackQuery):
    vote = callback_query.data.split("_")[1]
    elector_name = electors[int(vote) - 1]
    file_name = f"vote_{elector_name}.txt"
    user_id = str(callback_query.from_user.id)

    has_voted = False
    try:
        with open("all_votes.txt", "r", encoding="utf-8") as file:
            data = file.readlines()
            voted_users = [line.split(",")[0] for line in data]
            if user_id in voted_users:
                has_voted = True
    except FileNotFoundError:
        pass

    if has_voted:
        await bot.answer_callback_query(
            callback_query.id,
            "Siz allaqachon ovoz bergansiz! Faqat bitta saylanuvchiga ovoz berish mumkin.",
            show_alert=True
        )
        return

    try:
        with open(file_name, "r") as file:
            data = file.readlines()
            count = int(data[0])
            voters = set(data[1:])
    except FileNotFoundError:
        count = 0
        voters = set()

    count += 1
    voters.add(user_id)

    with open(file_name, "w") as file:
        file.write(f"{count}\n")
        file.writelines(f"{voter}\n" for voter in voters)

    with open("all_votes.txt", "a+", encoding="utf-8") as file:
        file.write(f"{user_id},{elector_name}\n")

    await bot.answer_callback_query(
        callback_query.id,
        f"{elector_name} uchun ovoz berildi!",
        show_alert=True
    )
    await callback_query.message.delete()


@dp.message_handler(Command("statistic"))
async def show_statistics(message: types.Message):
    electors_count = len(electors)

    total_voters = set()
    vote_count = {elector: 0 for elector in electors}

    try:
        with open("all_votes.txt", "r", encoding="utf-8") as file:
            data = file.readlines()
            for line in data:
                user_id, elector_name = line.strip().split(",")
                total_voters.add(user_id)
                if elector_name in vote_count:
                    vote_count[elector_name] += 1
    except FileNotFoundError:
        pass

    total_vote_count = sum(vote_count.values())

    statistics = "\n".join([f"{name}: {count} ovoz" for name, count in vote_count.items()])

    if not statistics:
        statistics = "Hozircha ovozlar mavjud emas."

    await message.answer(
        f"Umumiy statistika:\n"
        f"Saylanuvchilar soni: {electors_count}\n"
        f"Ovoz bergan foydalanuvchilar soni: {len(total_voters)}\n"
        f"Jami ovozlar soni: {total_vote_count}\n\n"
        f"Saylanishdagi ovozlar:\n{statistics}"
    )


if __name__ == "__main__":
    executor.start_polling(dp, skip_updates=True)
